<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

	var selectors = new []  {
		"DataTemplate",
		"Style",
	};

#>

namespace Elvex.Toolbox.WPF.UI.Selectors
{
    using System.Collections.Generic;
    using System.Linq;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Markup;

<#
	foreach (var type in selectors)
	{
#>
    /// <summary>
    /// Selector about <#= type #>
    /// </summary>
    [ContentProperty(nameof(Conditions))]
    public sealed class Conditional<#= type #>Selector : <#= type #>Selector
    {
        #region Ctor

        /// <summary>
        /// Initializes a new instance of the <see cref="Conditional<#= type #>Selector"/> class.
        /// </summary>
        public Conditional<#= type #>Selector()
        {
            this.Conditions = new List<IConditional<#= type #>>();
        }

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the default <#= type #>.
        /// </summary>
        public <#= type #>? Default { get; set; }

        /// <summary>
        /// Gets or sets the conditions.
        /// </summary>
        public List<IConditional<#= type #>> Conditions { get; set; }

        #endregion

        #region Methods

        /// <inheritdoc />
        public override <#= type #>? Select<#= type.Replace("Data", "") #>(object item, DependencyObject container)
        {
            if (this.Conditions is not null && this.Conditions.Any())
            {
                var dataCtx = item is FrameworkElement ife
                                        ? ife.DataContext
                                        : item ?? (container as FrameworkElement)?.DataContext;

                foreach (var cond in this.Conditions)
                {
                    if (cond.TryGetItem(container, dataCtx, out var tmpl) && tmpl is not null)
                        return tmpl;
                }
            }

            return this.Default;
        }

        #endregion
    }
<#
	}
#>
}