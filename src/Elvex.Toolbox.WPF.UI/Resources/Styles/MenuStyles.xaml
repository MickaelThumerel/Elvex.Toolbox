<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style x:Key="DefaultMenuSeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="{DynamicResource SeparatorSize}" />
        <Setter Property="Margin" Value="{DynamicResource GoldenMargin}" />

        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader {x:Static MenuItem.TopLevelHeaderTemplateKey} -->
    <ControlTemplate x:Key="DefaultTopLevelHeaderTemplateKey" TargetType="{x:Type MenuItem}">
        <Border >
            <Grid>

                <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" />

                <ContentPresenter Margin="{DynamicResource GoldenMargin}"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />

                <Popup x:Name="Popup"
                       Placement="Bottom"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True"
                       Focusable="False"
                       PopupAnimation="Fade">

                    <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            BorderThickness="1"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}">

                        <ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto">

                            <StackPanel IsItemsHost="True"
                                        KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>

                    </Border>
                </Popup>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>

            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>

            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightComplementaryBrush}" />
            </Trigger>

            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                <Setter Property="OpacityMask" Value="{DynamicResource DisabledOverlayBrush}" />
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelItem {x:Static MenuItem.TopLevelItemTemplateKey} -->
    <ControlTemplate x:Key="DefaultTopLevelItemTemplateKey" TargetType="{x:Type MenuItem}">

        <Border>
            <Grid>
                <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" />
                
                <ContentPresenter Margin="{DynamicResource GoldenMargin}"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
            </Grid>
        </Border>

        <ControlTemplate.Triggers>

            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightComplementaryBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                <Setter Property="OpacityMask" Value="{DynamicResource DisabledOverlayBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem {x:Static MenuItem.SubmenuItemTemplateKey} -->
    <ControlTemplate x:Key="DefaultSubmenuItemTemplateKey" TargetType="{x:Type MenuItem}">
        <Border>
            <Grid>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>

                <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}"
                        Grid.ColumnSpan="4"/>
                
                <ContentPresenter x:Name="Icon"
                                  Margin="{DynamicResource DefaultLeftRightMargin}"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon" />

                <Border x:Name="Check"
                        Width="13"
                        Height="13"
                        Visibility="Collapsed"
                        Margin="{DynamicResource DefaultLeftRightMargin}"
                        BorderThickness="{TemplateBinding BorderThickness}">

                    <Path x:Name="CheckMark"
                          Width="7"
                          Height="7"
                          Visibility="Hidden"
                          SnapsToDevicePixels="False"
                          StrokeThickness="2"
                          Data="M 0 0 L 7 7 M 0 7 L 7 0"
                          Style="{DynamicResource IconSmallestPathStyle}"/>

                </Border>

                <ContentPresenter x:Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />

                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="5,2,0,2"
                           DockPanel.Dock="Right" />
            </Grid>

        </Border>
        <ControlTemplate.Triggers>

            <Trigger Property="ButtonBase.Command" Value="{x:Null}" />

            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                <Setter TargetName="HeaderHost" Property="Grid.Column" Value="0" />
                <Setter TargetName="HeaderHost" Property="Grid.ColumnSpan" Value="3" />
            </Trigger>

            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>

            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>

            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightComplementaryBrush}" />
                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ComplementaryBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                <Setter Property="OpacityMask" Value="{DynamicResource DisabledOverlayBrush}" />
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- {x:Static MenuItem.SubmenuHeaderTemplateKey} -->
    <ControlTemplate x:Key="DefaultSubmenuHeaderTemplateKey" TargetType="{x:Type MenuItem}">
        <Border>
            <Grid>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>

                <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}"
                        Grid.ColumnSpan="4"/>
                
                <ContentPresenter x:Name="Icon"
                                  Margin="{DynamicResource DefaultLeftRightMargin}"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon" />

                <ContentPresenter x:Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />

                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="5,2,2,2"
                           DockPanel.Dock="Right" />

                <Path Grid.Column="3"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 0 0 L 0 7 L 4 3.5 Z"
                      Style="{DynamicResource IconSmallestPathStyle}"/>

                <Popup x:Name="Popup"
                       Placement="Right"
                       HorizontalOffset="-2"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True"
                       Focusable="False"
                       PopupAnimation="Fade">

                    <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">

                        <ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto">

                            <StackPanel IsItemsHost="True"
                                        KeyboardNavigation.DirectionalNavigation="Cycle" />

                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>

            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="HeaderHost" Property="Grid.Column" Value="0" />
                <Setter TargetName="HeaderHost" Property="Grid.ColumnSpan" Value="3" />
            </Trigger>

            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource LightComplementaryBrush}" />
                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ComplementaryBrush}" />
            </Trigger>

            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                <Setter Property="OpacityMask" Value="{DynamicResource DisabledOverlayBrush}" />
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem Style -->
    <Style x:Key="DefaultMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />

        <Setter Property="Background" Value="{DynamicResource LightBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LightBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />

        <Style.Triggers>

            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource DefaultTopLevelHeaderTemplateKey}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            </Trigger>

            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource DefaultTopLevelItemTemplateKey}" />
            </Trigger>

            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource DefaultSubmenuHeaderTemplateKey}" />
            </Trigger>

            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource DefaultSubmenuItemTemplateKey}" />
            </Trigger>

        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource DefaultMenuItemStyle}" />

    <Style x:Key="DefaultMenuStyle" TargetType="{x:Type Menu}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Background" Value="{DynamicResource LightBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LightBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">

                        <StackPanel ClipToBounds="True"
                                    Orientation="Horizontal"
                                    IsItemsHost="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource DefaultMenuSeparatorStyle}" />
        </Style.Resources>

    </Style>

    <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource DefaultMenuStyle}" />

    <Style x:Key="DefaultContextMenuStyle" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="False" />

        <Setter Property="Background" Value="{DynamicResource LightBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LightBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                        <StackPanel IsItemsHost="True"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" />

                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource DefaultMenuSeparatorStyle}" />
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource DefaultContextMenuStyle}" />

</ResourceDictionary>